package com.asideas.recruitmenttests.newsapp.rest;

import java.util.List;
import java.util.UUID;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.asideas.recruitmenttests.newsapp.db.NewsDatabase;
import com.asideas.recruitmenttests.newsapp.pojo.NewsPojo;

/**
 * This class is used to provide the RESTful resources. Each resource is 
 * specified by a unique path. The path entails a version number which helps
 * to provide evolving implementation over time.
 * 
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
@Path("/v1/news")
@Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
@Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
public class NewsResource {

	/**
	 * This method retrieves a list of news entries. This method also provides
	 * some optional parameters. In order to keep is stupid and simple, 
	 * parameters are mutually exclusive and weighted as follows: author beats 
	 * everything, keyword beats period and period beats empty parameter.
	 * 
	 * When no parameter is set, this method retrieves a list of all available
	 * news entries. 
	 * 
	 * @param author 
	 * @param keyword
	 * @param period
	 * @return
	 */
	@GET
	public List<NewsPojo> get(
			@QueryParam("author") String author,
			@QueryParam("keyword") String keyword,
			@QueryParam("period") String period) {
		
		if(author != null && !author.isEmpty()) {
			return NewsDatabase.readByAuthor(author);
		} else if(keyword != null && !keyword.isEmpty()) {
			return NewsDatabase.readByKeyword(keyword);
		} else if(period != null && !period.isEmpty()) {
			return NewsDatabase.readByPeriod(period);
		} else {
			return NewsDatabase.read();
		}
	}
	
	/**
	 * This method is used to get a specific news entry.
	 * 
	 * @param id UUID of the specific news entry
	 * @return the requested news entry
	 */
	@GET
	@Path("{id}")
	public NewsPojo get(@PathParam("id") UUID id) {
		return NewsDatabase.read(id);
	}
	
	/**
	 * This method creates a new news entry. The UUID field should be null
	 * it's overridden in any case since it is generated by the API to provide
	 * consistent entries.  
	 * 
	 * @param pojo the new news entry
	 * @return response 'ok' if everything goes fine status code 409 otherwise 
	 */
	@POST
	public Response post(NewsPojo pojo) {
		UUID id = NewsDatabase.insert(pojo);
		if(id != null) {
			return Response.ok(id).build();
		} else {
			throw new WebApplicationException(409);
		}
	}
	
	/**
	 * This method is used to update an existing resource. Partial updates are
	 * not allowed. The resource id shold match the object id.
	 * 
	 * @param id the resource id
	 * @param pojo the specific news entry object
	 * @return response 'ok' if everything goes fine status code 400 or 409 else
	 */
	@PUT
	@Path("{id}")
	public Response put(@PathParam("id") UUID id, NewsPojo pojo) {
		if(id.equals(pojo.getId())) {
			if(NewsDatabase.update(pojo)) {
				return Response.ok().build();
			} else {
				throw new WebApplicationException(409);
			}
		} else {
			throw new WebApplicationException(400);
		}		
	}

}
